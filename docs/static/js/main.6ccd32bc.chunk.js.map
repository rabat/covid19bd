{"version":3,"sources":["serviceWorker.js","store/district/index.js","components/BangladeshMap.js","components/DistrictInformation.js","pages/LandingPage.js","App.js","store/district/reducer.js","store/index.js","index.js"],"names":["Boolean","window","location","hostname","match","setSelectedDistrict","data","dispatch","a","type","features","feature","bd","objects","collection","meshes","mesh","projection","geoMercator","center","scale","pathGenerator","geoPath","Districts","districts","useSelector","store","district","all","colorScale","scaleLinear","domain","min","map","d","covid19","quarantine","max","range","index","key","fillColor","fill","className","Covid19","useDispatch","onClick","useCallback","idx","deathCircleRadius","long","lat","px","py","circleScale","confirmed","patientCircleRadius","patientCount","deathCount","died","style","transform","x","y","cx","cy","r","BangladeshMap","parseCitationPageMetaTag","url","fetch","then","response","text","html","re","meta","exec","value","DistrictInformation","selected","useState","citations","setCitations","useEffect","Promise","getCitation","href","target","rel","cite","title","site_name","LandingPage","App","path","component","initialData","find","reducer","state","rootReducer","combineReducers","districtsReducer","middlewares","thunkMiddleware","enhancers","applyMiddleware","composedEnhancers","composeWithDevTools","createStore","history","createBrowserHistory","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ccd32bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const setSelectedDistrict = data => async dispatch => {\n  dispatch({ type: 'SET_SELECTED_DISTRICT', data });\n};\n","import React, { useCallback } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { feature, mesh } from 'topojson-client';\nimport { geoMercator, geoPath, min, max, scaleLinear } from 'd3';\n\nimport { setSelectedDistrict } from '../store/district';\nimport bd from '../bd.topo.json';\n\nconst features = feature(bd, bd.objects.collection);\nconst meshes = mesh(bd, bd.objects.collection);\nconst projection = geoMercator()\n  .center([91.2, 24.8])\n  .scale(6500);\n\nconst pathGenerator = geoPath().projection(projection);\n\nconst Districts = () => {\n  const districts = useSelector(store => store.district.all);\n  const colorScale = scaleLinear()\n    .domain([\n      min(districts.map(d => d.covid19.quarantine)),\n      max(districts.map(d => d.covid19.quarantine))\n    ])\n    .range(['#f1f1f1', '#f8cc2c']);\n\n  return features.features.map((d, index) => {\n    const key = 'district-' + index;\n    const fillColor = colorScale(districts[index].covid19.quarantine);\n    return (\n      <path\n        key={key}\n        fill={fillColor}\n        d={pathGenerator(d)}\n        className=\"district\"\n      />\n    );\n  });\n};\n\nconst Covid19 = () => {\n  const dispatch = useDispatch();\n  const districts = useSelector(store => store.district.all);\n\n  const onClick = useCallback(\n    async data => {\n      await dispatch(setSelectedDistrict(data));\n    },\n    [dispatch]\n  );\n\n  return districts.map(({ district, long, lat }, idx) => {\n    const key = 'covid19-data-' + idx;\n    const [px, py] = projection([long, lat]);\n\n    const circleScale = scaleLinear()\n      .domain([\n        min(districts.map(d => d.covid19.confirmed)),\n        max(districts.map(d => d.covid19.confirmed))\n      ])\n      .range([10, 20]);\n\n    let patientCircleRadius = 0;\n    let deathCircleRadius = 0;\n    let patientCount = districts[idx].covid19.confirmed;\n    let deathCount = districts[idx].covid19.died;\n\n    deathCircleRadius =\n      deathCount > 0 ? circleScale(deathCount) - 2 : deathCount;\n    patientCircleRadius =\n      patientCount > 0 ? circleScale(patientCount) : patientCircleRadius;\n\n    return (\n      <g\n        key={key}\n        style={{ transform: `translate(${px}px, ${py}px)` }}\n        className=\"district-label\"\n        onClick={() => onClick(districts[idx])}\n      >\n        <text x=\"-16\" y=\"8\">\n          {district}\n        </text>\n        <circle\n          className=\"confirmed-circle\"\n          cx=\"2\"\n          cy=\"4\"\n          r={patientCircleRadius}\n        />\n        <circle\n          className=\"passed-away-circle\"\n          cx=\"3\"\n          cy=\"2\"\n          r={deathCircleRadius}\n        />\n      </g>\n    );\n  });\n};\n\nconst BangladeshMap = () => {\n  return (\n    <div className=\"w-full\">\n      <svg className=\"w-full bd-map\">\n        <path className=\"district-border\" d={pathGenerator(meshes)}></path>\n        <Districts />\n        <Covid19 />\n      </svg>\n    </div>\n  );\n};\n\nexport default BangladeshMap;\n","import React, { useState, useEffect } from 'react';\nimport { useSelector } from 'react-redux';\n\n// only work for news portals allow 'Access-Control-Allow-Origin'\nconst parseCitationPageMetaTag = async url => {\n  const html = await fetch(url).then(response => response.text());\n  const re = /<meta\\s*(?:property|name)=(\"?(?:og|twitter):(\\w*)).*\\scontent=\"(.*)\"/g;\n\n  let meta = {};\n  let match = null;\n\n  while ((match = re.exec(html))) {\n    const [, , key, value] = match;\n    if (key && value) {\n      meta = { ...meta, [key]: value };\n    }\n  }\n\n  return meta;\n};\n\nconst DistrictInformation = () => {\n  const district = useSelector(store => store.district.selected);\n  const [citations, setCitations] = useState([]);\n\n  useEffect(() => {\n    setCitations([]);\n\n    const getCitation = async () => {\n      const citations = await Promise.all(\n        district.citations.map(url => parseCitationPageMetaTag(url))\n      );\n      setCitations(citations);\n    };\n\n    getCitation();\n  }, [district]);\n\n  return (\n    <div className=\"w-2/3 pt-20 h-auto\">\n      <div className=\"border-l border-gray pl-8 pt-10 pb-10\">\n        <div className=\"pb-4 text-lg\">{district.district}</div>\n        <div className=\"flex flex-wrap\">\n          <div className=\"w-1/2 mb-2\">\n            <div className=\"bg-yellow w-4 h-3 mr-2 inline-block\"></div>\n            <div className=\"text-sm inline-block\"> Quarantine </div>\n            <div className=\"text-sm font-bold\">\n              {district.covid19.quarantine}\n            </div>\n          </div>\n          <div className=\"w-1/2 mb-2\">\n            <div className=\"bg-orrange w-4 h-3 mr-2 inline-block\"></div>\n            <div className=\"text-sm inline-block\"> Confimed cases </div>\n            <div className=\"text-sm font-bold\">\n              {district.covid19.confirmed}\n            </div>\n          </div>\n          <div className=\"w-1/2 mb-2\">\n            <div className=\"bg-green w-4 h-3 mr-2 inline-block\"></div>\n            <div className=\"text-sm inline-block\"> Recovered </div>\n            <div className=\"text-sm font-bold\">N/A</div>\n          </div>\n          <div className=\"w-1/2 mb-2\">\n            <div className=\"bg-red w-4 h-3 mr-2 inline-block\"></div>\n            <div className=\"text-sm inline-block\"> Deaths </div>\n            <div className=\"text-sm font-bold\">{district.covid19.died}</div>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"mt-8 text-xs pb-2\">Citations</div>\n      <div className=\"pb-2 text-xs\">\n        <a\n          href=\"http://103.247.238.81/webportal/pages/covid19.php\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          <span className=\"pr-2\">Data source</span>\n          <span>HEOC & Control Room, IEDCR, DHIS2</span>\n        </a>\n      </div>\n\n      {citations.map((cite, idx) => {\n        let key = 'cite-' + idx;\n        return (\n          <div className=\"text-xs\" key={key}>\n            <a href={cite.url} target=\"_blank\" rel=\"noopener noreferrer\">\n              <span>\n                <span className=\"pr-2\">{idx + 1}</span>\n                <span className=\"italic\">\n                  {cite.title} [<span>{cite.site_name}</span>]\n                </span>\n              </span>\n            </a>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default DistrictInformation;\n","import React from 'react';\nimport BangadeshMap from '../components/BangladeshMap';\nimport DistrictInformation from '../components/DistrictInformation';\n\nconst LandingPage = () => {\n  return (\n    <div className=\"flex flex-wrap \">\n      <div className=\"w-6/12 text-left h-auto overflow-hidden\">\n        <BangadeshMap />\n      </div>\n\n      <div className=\"w-6/12 flex justify-center \">\n        <DistrictInformation />\n      </div>\n    </div>\n  );\n};\n\nexport default LandingPage;\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport LandingPage from './pages/LandingPage';\n\nfunction App() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={LandingPage} />\n    </Switch>\n  );\n}\n\nexport default App;\n","import districts from '../../districts.json';\n\nconst initialData = {\n  selected: districts.find(d => d.district === 'Dhaka'),\n  all: districts\n};\n\nconst reducer = (state = initialData, { type, data }) => {\n  switch (type) {\n    case 'SET_SELECTED_DISTRICT':\n      return {\n        ...state,\n        selected: data\n      };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport districtsReducer from './district/reducer';\nconst rootReducer = combineReducers({\n  district: districtsReducer\n});\n\nconst middlewares = [thunkMiddleware];\nconst middlewareEnhancer = applyMiddleware(...middlewares);\nconst enhancers = [middlewareEnhancer];\nconst composedEnhancers = composeWithDevTools(...enhancers);\n\nexport const store = createStore(rootReducer, composedEnhancers);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\nimport { createBrowserHistory } from 'history';\nimport { Provider } from 'react-redux';\n\nimport './styles.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport App from './App';\nimport { store } from './store';\n\nconst history = createBrowserHistory();\n\nReactDOM.render(\n  <Provider store={store}>\n    <Router history={history}>\n      <App />\n    </Router>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}